{
  // Helper functions for creating AST nodes
  function createQuantifier(variable, formula, name) {
    return { type: "Quantifier", variable: variable, formula: formula, name: name };
  }

  function createLogicalUnary(formula, name) {
    return { type: "LogicalUnary", formula: formula, name: name };
  }

  function createLogicalBinary(left, right, name) {
    return { type: "LogicalBinary", left: left, right: right, name: name };
  }

  function createApplication(symbol, count, args) {
    return { type: "Application", symbol: symbol, arguments: args.slice(0, count) };
  }

  function createConst(name) {
    return { type: "Const", name: name };
  }

  function createVariable(name) {
    return { type: "Variable", name: name, metavar: false, bound: false };
  }

  function createBinaryOp(name) {
    return { type: "BinaryOp", name: name };
  }

  function createUnaryOp(name) {
    return { type: "UnaryOp", name: name };
  }

  function createTuple(count, terms) {
    return { type: "Tuple", elements: terms.slice(0, count) };
  }

  function createSet(count, terms) {
    return { type: "Set", elements: terms.slice(0, count) };
  }

  // Binds a variable in a formula
  function bind_var(variable, formula) {
    function bind(node) {
      if (node.type === "Variable" && node.name === variable.name) {
        node.bound = true;
      } else if (node.type === "Application") {
        node.arguments.forEach(bind);
      } else if (node.type === "Tuple") {
        node.elements.forEach(bind);
      } else if (node.type === "Quantifier") {
        bind(node.formula);
      } else if (node.type === "LogicalUnary") {
        bind(node.formula);
      } else if (node.type === "LogicalBinary") {
        bind(node.left);
        bind(node.right);
      }
    }
    bind(formula);
  }
}

Start
  = _ formula:Formula _ { return formula; }

// Lexical rules
_
  = [ \t]*

EOL
  = '\n' / '\r' / '\r\n'

Variable
  = [a-zA-Z] [a-zA-Z0-9]* { return createVariable(text()); }

QuantifierOp
  = FORALL
  / EXISTS

TOP = "\\top" { return createConst('top'); }
BOT = "\\bot" { return createConst('bot'); }
NEG = "\\neg" { return 'neg'; }
WEDGE = "\\wedge" { return 'wedge'; }
VEE = "\\vee" { return 'vee'; }
SHEFFER = "\\uparrow" { return 'sheffer'; }
IMPLIES = "\\implies" { return 'implies'; }
IFF = "\\iff" { return 'iff'; }
FORALL = "\\forall" { return 'forall'; }
EXISTS = "\\exists" { return 'exists'; }
EQUALS = "=" { return createVariable('equals'); }
EMPTYSET = "\\emptyset" { return createSet(0, []); }
CAP = "\\cap" { return 'cap'; }
CUP = "\\cup" { return 'cup'; }
SETMINUS = "\\setminus" { return 'setminus'; }
TIMES = "\\times" { return 'times'; }
POWERSET = "\\mathcal{P}" { return 'powerset'; }
SUBSETEQ = "\\subseteq" { return createVariable('subseteq'); }
SUBSET = "\\subset" { return createVariable('subset'); }
OPEN = '('
CLOSE = ')'
COMMA = ','
LBRACE = '{'
RBRACE = '}'

// Main rules
Formula
  = Quantifier
  / IffFormula
  / Predicate

Quantifier
  = op:QuantifierOp _ v:Variable _ f:SimpleFormula {
      bind_var(v, f);
      return createQuantifier(v, f, op);
  }

IffFormula
  = l:ImpliesFormula _ IFF _ r:IffFormula {
      return createLogicalBinary(l, r, "iff");
  }
  / ImpliesFormula

ImpliesFormula
  = l:AndFormula _ IMPLIES _ r:ImpliesFormula {
      return createLogicalBinary(l, r, "implies");
  }
  / AndFormula

AndFormula
  = l:OrFormula tail:(_ WEDGE _ r:OrFormula)* {
      return tail.reduce((result, element) => {
        return createLogicalBinary(result, element[3], "wedge");
      }, l);
    }

OrFormula
  = l:ShefferFormula tail:(_ VEE _ r:ShefferFormula)* {
      return tail.reduce((result, element) => {
        return createLogicalBinary(result, element[3], "vee");
      }, l);
    }

ShefferFormula
  = l:SimpleFormula tail:(_ SHEFFER _ r:SimpleFormula)* {
      return tail.reduce((result, element) => {
        return createLogicalBinary(result, element[3], "sheffer");
      }, l);
    }

EqualPredicate
  = t1:Term _ i:EQUALS _ t2:Term {
      return createApplication(i, 2, [t1, t2]);
  }

SubsetPredicate
  = t1:Term _ i:SUBSETOP _ t2:Term {
      return createApplication(i, 2, [t1, t2]);
  }
  
Predicate
  = f:Application

Negation
  = NEG _ f:SimpleFormula {
      return createLogicalUnary(f, "neg");
  }

SUBSETOP
  = SUBSETEQ / SUBSET

Metavariable
  = v:Variable { v.metavar = true; return v; }
  
SimpleFormula
  = Quantifier
  / EqualPredicate
  / SubsetPredicate
  / Predicate
  / Negation
  / TOP
  / BOT
  / Metavariable
  / OPEN _ f:Formula _ CLOSE { return f; }

Term
  = l:SimpleTerm tail:(_ s:SetOp _ r:SimpleTerm)* {
      return tail.reduce((result, element) => {
        return createApplication(createBinaryOp(element[1]), 2, [result, element[3]]);
      }, l);
    }
  
SetOp
  = CAP
  / CUP
  / SETMINUS
  / TIMES

SimpleTerm
  = Application
  / UnaryOp
  / Variable
  / Tuple
  / Set
  / EMPTYSET

Application
  = i:Variable _ OPEN _ args:TermList _ CLOSE {
      return createApplication(i, args.length, args);
  }

TermList
  = head:Term tail:(_ COMMA _ Term)* {
      return [head].concat(tail.map(e => e[3]));
  }

UnaryOp
  = p:POWERSET _ OPEN _ t:Term _ CLOSE {
      return createApplication(createUnaryOp(p), 1, [t]);
  }

Tuple
  = OPEN _ args:TermList? _ CLOSE {
      if (args === null) {
         return createTuple(0, []);
      } else {
         return createTuple(args.length, args);
      }
  }

Set
  = LBRACE _ args:TermList? _ RBRACE {
      if (args === null) {
         return createSet(0, []);
      } else {
         return createSet(args.length, args);
      }
  }
