// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/


function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = "\r\n";
  var peg$c1 = "\\top";
  var peg$c2 = "\\bot";
  var peg$c3 = "\\neg";
  var peg$c4 = "\\wedge";
  var peg$c5 = "\\vee";
  var peg$c6 = "\\uparrow";
  var peg$c7 = "\\implies";
  var peg$c8 = "\\iff";
  var peg$c9 = "\\forall";
  var peg$c10 = "\\exists";
  var peg$c11 = "=";
  var peg$c12 = "\\emptyset";
  var peg$c13 = "\\cap";
  var peg$c14 = "\\cup";
  var peg$c15 = "\\setminus";
  var peg$c16 = "\\times";
  var peg$c17 = "\\mathcal{P}";
  var peg$c18 = "\\subseteq";
  var peg$c19 = "\\subset";
  var peg$c20 = "(";
  var peg$c21 = ")";
  var peg$c22 = ",";
  var peg$c23 = "{";
  var peg$c24 = "}";

  var peg$r0 = /^[ \t]/;
  var peg$r1 = /^[\n\r]/;
  var peg$r2 = /^[a-zA-Z]/;
  var peg$r3 = /^[a-zA-Z0-9]/;

  var peg$e0 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e1 = peg$classExpectation(["\n", "\r"], false, false);
  var peg$e2 = peg$literalExpectation("\r\n", false);
  var peg$e3 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e4 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"]], false, false);
  var peg$e5 = peg$literalExpectation("\\top", false);
  var peg$e6 = peg$literalExpectation("\\bot", false);
  var peg$e7 = peg$literalExpectation("\\neg", false);
  var peg$e8 = peg$literalExpectation("\\wedge", false);
  var peg$e9 = peg$literalExpectation("\\vee", false);
  var peg$e10 = peg$literalExpectation("\\uparrow", false);
  var peg$e11 = peg$literalExpectation("\\implies", false);
  var peg$e12 = peg$literalExpectation("\\iff", false);
  var peg$e13 = peg$literalExpectation("\\forall", false);
  var peg$e14 = peg$literalExpectation("\\exists", false);
  var peg$e15 = peg$literalExpectation("=", false);
  var peg$e16 = peg$literalExpectation("\\emptyset", false);
  var peg$e17 = peg$literalExpectation("\\cap", false);
  var peg$e18 = peg$literalExpectation("\\cup", false);
  var peg$e19 = peg$literalExpectation("\\setminus", false);
  var peg$e20 = peg$literalExpectation("\\times", false);
  var peg$e21 = peg$literalExpectation("\\mathcal{P}", false);
  var peg$e22 = peg$literalExpectation("\\subseteq", false);
  var peg$e23 = peg$literalExpectation("\\subset", false);
  var peg$e24 = peg$literalExpectation("(", false);
  var peg$e25 = peg$literalExpectation(")", false);
  var peg$e26 = peg$literalExpectation(",", false);
  var peg$e27 = peg$literalExpectation("{", false);
  var peg$e28 = peg$literalExpectation("}", false);

  var peg$f0 = function(formula) { return formula; };
  var peg$f1 = function() { return createVariable(text()); };
  var peg$f2 = function() { return createConst('top'); };
  var peg$f3 = function() { return createConst('bot'); };
  var peg$f4 = function() { return 'neg'; };
  var peg$f5 = function() { return 'wedge'; };
  var peg$f6 = function() { return 'vee'; };
  var peg$f7 = function() { return 'sheffer'; };
  var peg$f8 = function() { return 'implies'; };
  var peg$f9 = function() { return 'iff'; };
  var peg$f10 = function() { return 'forall'; };
  var peg$f11 = function() { return 'exists'; };
  var peg$f12 = function() { return createVariable('equals'); };
  var peg$f13 = function() { return createSet(0, []); };
  var peg$f14 = function() { return 'cap'; };
  var peg$f15 = function() { return 'cup'; };
  var peg$f16 = function() { return 'setminus'; };
  var peg$f17 = function() { return 'times'; };
  var peg$f18 = function() { return 'powerset'; };
  var peg$f19 = function() { return createVariable('subseteq'); };
  var peg$f20 = function() { return createVariable('subset'); };
  var peg$f21 = function(op, v, f) {
      bind_var(v, f);
      return createQuantifier(v, f, op);
  };
  var peg$f22 = function(l, r) {
      return createLogicalBinary(l, r, "iff");
  };
  var peg$f23 = function(l, r) {
      return createLogicalBinary(l, r, "implies");
  };
  var peg$f24 = function(l, tail) {
      return tail.reduce((result, element) => {
        return createLogicalBinary(result, element[3], "wedge");
      }, l);
    };
  var peg$f25 = function(l, tail) {
      return tail.reduce((result, element) => {
        return createLogicalBinary(result, element[3], "vee");
      }, l);
    };
  var peg$f26 = function(l, tail) {
      return tail.reduce((result, element) => {
        return createLogicalBinary(result, element[3], "sheffer");
      }, l);
    };
  var peg$f27 = function(t1, i, t2) {
      return createApplication(i, 2, [t1, t2]);
  };
  var peg$f28 = function(t1, i, t2) {
      return createApplication(i, 2, [t1, t2]);
  };
  var peg$f29 = function(f) {
      return createLogicalUnary(f, "neg");
  };
  var peg$f30 = function(v) { v.metavar = true; return v; };
  var peg$f31 = function(f) { return f; };
  var peg$f32 = function(l, tail) {
      return tail.reduce((result, element) => {
        return createApplication(createBinaryOp(element[1]), 2, [result, element[3]]);
      }, l);
    };
  var peg$f33 = function(i, args) {
      return createApplication(i, args.length, args);
  };
  var peg$f34 = function(head, tail) {
      return [head].concat(tail.map(e => e[3]));
  };
  var peg$f35 = function(p, t) {
      return createApplication(createUnaryOp(p), 1, [t]);
  };
  var peg$f36 = function(args) {
      if (args === null) {
         return createTuple(0, []);
      } else {
         return createTuple(args.length, args);
      }
  };
  var peg$f37 = function(args) {
      if (args === null) {
         return createSet(0, []);
      } else {
         return createSet(args.length, args);
      }
  };
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseFormula();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r0.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r0.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
    }

    return s0;
  }

  function peg$parseEOL() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r1.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s0 = peg$c0;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r2.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f1();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuantifierOp() {
    var s0;

    s0 = peg$parseFORALL();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEXISTS();
    }

    return s0;
  }

  function peg$parseTOP() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBOT() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNEG() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseWEDGE() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c4) {
      s1 = peg$c4;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f5();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseVEE() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSHEFFER() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c6) {
      s1 = peg$c6;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIMPLIES() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c7) {
      s1 = peg$c7;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f8();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseIFF() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFORALL() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEXISTS() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEQUALS() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEMPTYSET() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCAP() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCUP() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSETMINUS() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTIMES() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePOWERSET() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUBSETEQ() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUBSET() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOPEN() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 40) {
      s0 = peg$c20;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    return s0;
  }

  function peg$parseCLOSE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 41) {
      s0 = peg$c21;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    return s0;
  }

  function peg$parseCOMMA() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c22;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }

    return s0;
  }

  function peg$parseLBRACE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 123) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }

    return s0;
  }

  function peg$parseRBRACE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 125) {
      s0 = peg$c24;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseFormula() {
    var s0;

    s0 = peg$parseQuantifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIffFormula();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePredicate();
      }
    }

    return s0;
  }

  function peg$parseQuantifier() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseQuantifierOp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseVariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSimpleFormula();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIffFormula() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseImpliesFormula();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIFF();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseIffFormula();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseImpliesFormula();
    }

    return s0;
  }

  function peg$parseImpliesFormula() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseAndFormula();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseIMPLIES();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseImpliesFormula();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f23(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseAndFormula();
    }

    return s0;
  }

  function peg$parseAndFormula() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseOrFormula();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseWEDGE();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseOrFormula();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseWEDGE();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseOrFormula();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f24(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOrFormula() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseShefferFormula();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseVEE();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseShefferFormula();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseVEE();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseShefferFormula();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f25(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseShefferFormula() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSimpleFormula();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseSHEFFER();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseSimpleFormula();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseSHEFFER();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseSimpleFormula();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f26(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEqualPredicate() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTerm();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseEQUALS();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseTerm();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f27(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSubsetPredicate() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseTerm();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSUBSETOP();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseTerm();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f28(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePredicate() {
    var s0;

    s0 = peg$parseApplication();

    return s0;
  }

  function peg$parseNegation() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNEG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseSimpleFormula();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f29(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSUBSETOP() {
    var s0;

    s0 = peg$parseSUBSETEQ();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSUBSET();
    }

    return s0;
  }

  function peg$parseMetavariable() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSimpleFormula() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parseQuantifier();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEqualPredicate();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSubsetPredicate();
        if (s0 === peg$FAILED) {
          s0 = peg$parsePredicate();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNegation();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTOP();
              if (s0 === peg$FAILED) {
                s0 = peg$parseBOT();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseMetavariable();
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseOPEN();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse_();
                      s3 = peg$parseFormula();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        s5 = peg$parseCLOSE();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f31(s3);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTerm() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseSimpleTerm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseSetOp();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseSimpleTerm();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseSetOp();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseSimpleTerm();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f32(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetOp() {
    var s0;

    s0 = peg$parseCAP();
    if (s0 === peg$FAILED) {
      s0 = peg$parseCUP();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSETMINUS();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTIMES();
        }
      }
    }

    return s0;
  }

  function peg$parseSimpleTerm() {
    var s0;

    s0 = peg$parseApplication();
    if (s0 === peg$FAILED) {
      s0 = peg$parseUnaryOp();
      if (s0 === peg$FAILED) {
        s0 = peg$parseVariable();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTuple();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSet();
            if (s0 === peg$FAILED) {
              s0 = peg$parseEMPTYSET();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseApplication() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseVariable();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOPEN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseTermList();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseCLOSE();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f33(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTermList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseTerm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parseCOMMA();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseTerm();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        s5 = peg$parseCOMMA();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseTerm();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f34(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnaryOp() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsePOWERSET();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseOPEN();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseTerm();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseCLOSE();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f35(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTuple() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseOPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTermList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseCLOSE();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f36(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSet() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseLBRACE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTermList();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      s5 = peg$parseRBRACE();
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f37(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  // Helper functions for creating AST nodes
  function createQuantifier(variable, formula, name) {
    return { type: "Quantifier", variable: variable, formula: formula, name: name };
  }

  function createLogicalUnary(formula, name) {
    return { type: "LogicalUnary", formula: formula, name: name };
  }

  function createLogicalBinary(left, right, name) {
    return { type: "LogicalBinary", left: left, right: right, name: name };
  }

  function createApplication(symbol, count, args) {
    return { type: "Application", symbol: symbol, arguments: args.slice(0, count) };
  }

  function createConst(name) {
    return { type: "Const", name: name };
  }

  function createVariable(name) {
    return { type: "Variable", name: name, metavar: false, bound: false };
  }

  function createBinaryOp(name) {
    return { type: "BinaryOp", name: name };
  }

  function createUnaryOp(name) {
    return { type: "UnaryOp", name: name };
  }

  function createTuple(count, terms) {
    return { type: "Tuple", elements: terms.slice(0, count) };
  }

  function createSet(count, terms) {
    return { type: "Set", elements: terms.slice(0, count) };
  }

  // Binds a variable in a formula
  function bind_var(variable, formula) {
    function bind(node) {
      if (node.type === "Variable" && node.name === variable.name) {
        node.bound = true;
      } else if (node.type === "Application") {
        node.arguments.forEach(bind);
      } else if (node.type === "Tuple") {
        node.elements.forEach(bind);
      } else if (node.type === "Quantifier") {
        bind(node.formula);
      } else if (node.type === "LogicalUnary") {
        bind(node.formula);
      } else if (node.type === "LogicalBinary") {
        bind(node.left);
        bind(node.right);
      }
    }
    bind(formula);
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

const peg$allowedStartRules = [
  "Start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
