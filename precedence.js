export const precedenceTable = {
  forall: { precedence: 0, associativity: 'none', fixity: 'none', repr: '\\forall', unicode: '‚àÄ', mathjax: '\\forall' },
  exists: { precedence: 0, associativity: 'none', fixity: 'none', repr: '\\exists', unicode: '‚àÉ', mathjax: '\\exists' },
  wedge: { precedence: 4, associativity: 'left', fixity: 'infix', repr: '\\wedge', unicode: '‚àß', mathjax: '\\wedge' },
  vee: { precedence: 4, associativity: 'left', fixity: 'infix', repr: '\\vee', unicode: '‚à®', mathjax: '\\vee' },
  sheffer: { precedence: 4, associativity: 'left', fixity: 'infix', repr: '\\uparrow', unicode: '‚Üë', mathjax: '\\uparrow' },
  neg: { precedence: 0, associativity: 'none', fixity: 'prefix', repr: '\\neg', unicode: '¬¨', mathjax: '\\neg' },
  top: { precedence: 0, associativity: 'none', fixity: 'none', repr: '\\top', unicode: '‚ä§', mathjax: '\\top' },
  bot: { precedence: 0, associativity: 'none', fixity: 'none', repr: '\\bot', unicode: '‚ä•', mathjax: '\\bot' },
  implies: { precedence: 5, associativity: 'none', fixity: 'infix', repr: '\\implies', unicode: '‚Üí', mathjax: '\\to' },
  iff: { precedence: 5, associativity: 'right', fixity: 'infix', repr: '\\iff', unicode: '‚Üî', mathjax: '\\leftrightarrow' },
  equals: { precedence: 3, associativity: 'none', fixity: 'infix', repr: '=', unicode: '=', mathjax: '=' },
  emptyset: { precedence: 0, associativity: 'none', fixity: 'none', repr: '\\emptyset', unicode: '‚àÖ', mathjax: '\\emptyset' },
  cap: { precedence: 2, associativitity: 'left', fixity: 'infix', repr: '\\cap', unicode: '‚à©', mathjax: '\\cap' },
  cup: { precedence: 2, associativitity: 'left', fixity: 'infix', repr: '\\cup', unicode: '‚à™', mathjax: '\\cup' },
  setminus: { precedence: 2, associativitity: 'left', fixity: 'infix', repr: '\\setminus', unicode: '\\', mathjax: '\\setminus' },
  times: { precedence: 2, associativitity: 'left', fixity: 'infix', repr: '\\times', unicode: '√ó', mathjax: '\\times' },
  powerset: { precedece: 0, associativity: 'none', fixity: 'functional', repr: '\\mathcal{P}', unicode: 'ùí´', mathjax: '\\mathcal{P}' },
};

